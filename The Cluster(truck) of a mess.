import pygame
import random
pygame.init()
screen = pygame.display.set_mode((1500,800))
pygame.display.set_caption("Fish Tank")
clock = pygame.time.Clock() #set up clock
gameover = False

castleImg = pygame.image.load("castle.png").convert_alpha()
pygame.Surface.set_colorkey (castleImg, [255,255,255])
castleImg2 = pygame.image.load("castle2.png").convert_alpha()
pygame.Surface.set_colorkey (castleImg2, [255,255,255])

plantImg = pygame.image.load("plants.png").convert_alpha()
pygame.Surface.set_colorkey (plantImg, [255,255,255])
plantImg2 = pygame.image.load("plants2.png").convert_alpha()
pygame.Surface.set_colorkey (plantImg2, [255,255,255])

fishImg = pygame.image.load("fish.png").convert_alpha()
pygame.Surface.set_colorkey (fishImg, [255,0,255])

fishImg2 = pygame.image.load("fish2.png").convert_alpha()
pygame.Surface.set_colorkey (fishImg2, [255,255,255])

fishImg3 = pygame.image.load("blobfish.png").convert_alpha()
pygame.Surface.set_colorkey (fishImg3, [255,255,255])

seafoodImg = pygame.image.load("seafood.png").convert_alpha()
pygame.Surface.set_colorkey (seafoodImg, [255,255,255])
seafoodImg2 = pygame.image.load("seafood2.png").convert_alpha()
pygame.Surface.set_colorkey (seafoodImg2, [255,255,255])

shork1 = pygame.image.load('Sharpie1.png') #load your spritesheet
shork2 = pygame.image.load('Sharpie2.png')
shork_copy = shork1.copy()
shork_flip = pygame.transform.flip(shork_copy, True, False)
flip = 1

fibsh = pygame.image.load('fibsh.png')
fibsh2 = pygame.image.load('fibsh2.png')
fibsh_copy = fibsh.copy()
fibsh_flip = pygame.transform.flip(fibsh_copy, True, False)
flip2 = 1

xpos = 0
ypos = 0
mousePos = (xpos, ypos)

background = 1

fishieXpos = []
fishieYpos = []

fishie2Xpos = []
fishie2Ypos = []

fishie3Xpos = []
fishie3Ypos = []

sizes4 = []
positions4 = []
colors4 = []


xPositions = []
yPositions = []


bx = 100 #X-Axis
by = 200 #Y-Axis
bVx = 5 #X Velocity
bVy = 5 #Y Velocity
ax = 400 #X-Axis
ay = 700 #Y-Axis
aVx = 5 #X Velocity
aVy = 5 #Y Velocity
cx = 400 #X-Axis
cy = 400 #Y-Axis
cVx = 5 #X Velocity
cVy = 5 #Y Velocity



for i in range(500):
    xPositions.append(random.randrange(0, 1000))
    yPositions.append(random.randrange(-1000, 0))

    
class Bubble:
    def __init__(self, x, y):
        self.xpos = x
        self.ypos = -y
    def move(self):
        self.xpos += random.randrange(-2, 3) # Left & Right
        self.ypos -= random.randrange(0, 3) #Up & Down
        if self.ypos <0:
            self.ypos = random.randrange(500, 520)
    def draw(self):
        pygame.draw.circle(screen, (255, 255, 255), (self.xpos, self.ypos), 6) #draw bubble
        pygame.draw.circle(screen, (93,171,227), (self.xpos, self.ypos), 4) #draw bubble


#----------------------------------------------------------------------


#create a bunch of snowflakes
bubbleBag = []
for i in range(100): #Amount
    bubbleBag.append(Bubble(random.randrange(0, 1500), random.randrange(-800, 0))) #placement


        
    #---------------



#PEBBLES
for i in range(4500):
    sizes4.append(random.randrange(5,10)) #push in 1 number
    positions4.append((random.randrange(0, 1500),random.randrange(750, 1500))) #push in a 2-slot TUPLE
    colors4.append((random.randrange(150,175),random.randrange(164, 189),random.randrange(174,199))) #push in a 3-slot TUPLE
    
                                        #/\ This is the color.
    

while 1: #game loop###########################################################
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            Quit = True
    clock.tick(15) #FPS


    print(mousePos) #this is to help you know where to set these boundaries
        
    if event.type == pygame.MOUSEBUTTONDOWN:
            
    #background selection
        if mousePos[0]>1000 and mousePos[0] < 1200 and mousePos[1]>50 and mousePos[1]<225:
                background = 1 #castle
        elif mousePos[0]>1000 and mousePos[0] < 1200 and mousePos[1]>225 and mousePos[1]<425:
                background = 2 #plants
        elif mousePos[0]>1000 and mousePos[0] < 1200 and mousePos[1]>225 and mousePos[1]<625:
                background = 3 
  
    #fish selection
    elif mousePos[0]>25 and mousePos[0] < 200 and mousePos[1]>50 and mousePos[1]<150:
            fishieXpos.append(random.randrange(250, 900))
            fishieYpos.append(random.randrange(50,750))
               
    elif mousePos[0]>25 and mousePos[0] < 200 and mousePos[1]>50 and mousePos[1]<300:
            fishie2Xpos.append(random.randrange(250, 900))
            fishie2Ypos.append(random.randrange(50,750))
               
    elif mousePos[0]>25 and mousePos[0] < 200 and mousePos[1]>50 and mousePos[1]<450:
            fishie3Xpos.append(random.randrange(250, 900))
            fishie3Ypos.append(random.randrange(50,750))
               
    if event.type == pygame.MOUSEMOTION:
        mousePos = event.pos        


    #physics section----
    
    #move flakes
        for i in range(len(bubbleBag)):
            bubbleBag[i].move()


        #Fish Physics---
        
        
        bx += bVx
        by += bVy

        ax += aVx
        ay += aVy
        
        cx += cVx
        cy += cVy


        if bx < 0: #left wall bounds checking
            bVx *= -1#reflect!
            flip = 1
        
            print("turning right")
            
        elif bx > 1500: #right wall bounds checking
            bVx *= -1 #reflect
            flip = 2
        
        
            print("turning left")

            
        if by < 0 or by > 750:#Floor Registration
            bVy *= -1
            print("bounce!")
    

#split
        
        if ax < 0: #left wall bounds checking
            aVx *= -1#reflect!
            flip2 = 1

            
        if ax > 1500: #right wall bounds checking
            aVx *= -1 #reflect
            flip2 = 2
            
        if ay < 0 or ay > 750:#Floor Registration
            aVy *= -1
            print("bounce!")
    
#split
    
        if cx < 0: #left wall bounds checking
            cVx *= -1#reflect!

            
        if cx > 1500: #right wall bounds checking
            cVx *= -1 #reflect

            
        if cy < 0 or cy > 750:#Floor Registration
            cVy *= -1
            print("bounce!")
    
#split
    

    
    #render section------------------------------
    
    screen.fill((93,171,227))# Clear the screen
    
    #Hitbox Finding
    pygame.draw.circle(screen, (255, 255, 255), (bx, by), 15, 5)
    pygame.draw.circle(screen, (255, 255, 255), (ax, ay), 15, 5)


    #screen.fill((0,0,0))# Clear the screen

    #fill in "water" for tank
    pygame.draw.rect(screen, (100, 100, 200), (200, 0, 800, 800)) #make sure you know what these numbers do!

    #draw the lines on the screen
    pygame.draw.line(screen, (255,255,255), (200, 0), (200, 800), 2) #make sure you know what these numbers do!
    pygame.draw.line(screen, (255,255,255), (1000, 0), (1000, 800), 2)
    
    #draw background image
    if background == 1:
        screen.blit(castleImg, (240, 140))
    elif background ==2: 
        screen.blit(plantImg, (240, 140))
    elif background == 3: 
        screen.blit(seafoodImg, (240, 140))
    
    #draw fishies!
    for i in range(len(fishieXpos)):
        screen.blit(fishImg, (fishieXpos[i], fishieYpos[i]))
        
    for i in range(len(fishie2Xpos)):
        screen.blit(fishImg2, (fishie2Xpos[i], fishie2Ypos[i]))

    for i in range(len(fishie3Xpos)):
        screen.blit(fishImg3, (fishie3Xpos[i], fishie3Ypos[i]))

    #show sidebar images
    screen.blit(castleImg2, (1000, 50))
    screen.blit(plantImg2, (1010, 250))
    screen.blit(seafoodImg2, (1020, 500))
    screen.blit(fishImg, (50, 50))
    screen.blit(fishImg2, (40, 150))
    screen.blit(fishImg3, (30, 300))

    #draw the lines on the screen
    
    
    screen.blit(shork2, (bx-260, by-160))

    if flip == 1:
        screen.blit(shork_flip, (50 + 1 * bx-260, by-160))
    else:
        screen.blit(shork1, (bx-260, by-160))
    
    
    screen.blit(fibsh, (ax-140, ay-80))

    if flip2 == 1:
        screen.blit(fibsh_flip, (50 + 1 * ax-140, ay-80))
    else:
        screen.blit(fibsh, (ax-140, ay-80))
   
    pygame.draw.circle(screen, (255, 255, 255), (cx, cy), 15, 5)
   

    
    pygame.draw.rect(screen, (175, 189, 199), (0, 750 , 1500, 300), 500)


    pygame.draw.rect(screen, (150, 150, 150), (0, 0 , 1500, 800), 10)
    for i in range(4500):#draw the gravel
        pygame.draw.circle(screen, colors4[i], (positions4[i][0], positions4[i][1]), sizes4[i])
    for i in range(4500):#draw the gravel
        pygame.draw.circle(screen, colors4[i], (positions4[i][0], positions4[i][1]), sizes4[i])
    for i in range(4500):#draw the gravel
        pygame.draw.circle(screen, colors4[i], (positions4[i][0], positions4[i][1]), sizes4[i])
    
        
    for i in range(len(bubbleBag)):
        bubbleBag[i].draw()
 
    
    pygame.display.flip()# Update the display

#end of game loop###################################################################
pygame.quit()
